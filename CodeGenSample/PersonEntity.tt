<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Text.Json.dll" #>
<#@ assembly name="System.Memory.dll" #>
<#@ assembly name="Microsoft.CSharp.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // Get the file name without extension
    string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(this.Host.TemplateFile);

    // Construct the path to the JSON schema file in the same directory as the T4 template
    string jsonSchemaFilePath = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), fileNameWithoutExtension + ".json");

    // Read the JSON schema file
    string jsonSchema = File.ReadAllText(jsonSchemaFilePath);

    // Deserialize JSON schema
    JsonDocument schema = JsonDocument.Parse(jsonSchema);

    // Generate the timestamp for when the file was generated
    string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated on: <#= timestamp #>
// </auto-generated>
//------------------------------------------------------------------------------

using System;

public class <#= fileNameWithoutExtension #>
{
<#
    foreach (JsonProperty property in schema.RootElement.GetProperty("properties").EnumerateObject())
    {
        string propertyName = property.Name;
        JsonElement propertyDetails = property.Value;

        string propertyType = propertyDetails.GetProperty("type").GetString();

        // Generate property declaration
#>
    public <#= propertyType #> <#= propertyName #> { get; set; }
<#
    }
#>

    // For demo purposes, add a to string override
    public override string ToString()
    {
        return $"Name: {Name}, Age: {Age}, Email: {Email}";
    }
}
